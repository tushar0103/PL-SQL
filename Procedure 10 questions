 Assignment 26/08/24

Name Tushar kumar
3813


question  :  create a procedure for finding the length of any name which user input;

         create or replace procedure length_ex
            (p_name varchar2 , p_len out number)
            is
            v_len number(20);
            begin
            v_len := length(p_name);
            p_len := v_len;
         end;


----execution part----
declare
v_name varchar2(20) :='tushar kumar';
v_len number;
begin
length_ex(v_name,v_len);
dbms_output.put_line(v_len);
end;



by function




    create  function length_ex1(p_name varchar2)
    return number
    is
        v_len number;
    begin
        v_len := length(p_name);
        return v_len;
   end;



DECLARE
    v_result NUMBER;
BEGIN
    v_result := length_ex1('tushar kumar');
    DBMS_OUTPUT.PUT_LINE(v_result);
END;
/

===========================================================================================


question : Create a procedure that takes a date as an IN parameter and returns the day of the week through an OUT parameter.

create  or replace procedure date_ex
(p_date date , p_day out varchar2)
is
v_day varchar2(15);
begin
v_day := to_char(p_date, 'day');
p_day :=v_day;
end;

----execution part----

declare 
v_day varchar2(15);
begin
date_ex(sysdate,v_day);
dbms_output.put_line(v_day);
end;



by function  ------------->
 
create or replace function date_ex1(p_date date) 
return varchar2 
is
    v_day varchar2(15);
begin
    v_day := to_char(p_date, 'day');
    return v_day;  
end;


declare
v_result varchar2(10);
begin
v_result :=date_ex2(sysdate);
dbms_output.put_line(v_result);
end;



=================================================================================================


Create a procedure that takes a string and returns the number of vowels in that string through an OUT parameter


create or replace procedure count_vowels(
    p_name in varchar2,
    p_count out number
) is
    v_count number := 0; 
begin

    for i in 1..length(p_name) loop
    
        if substr(p_name, i, 1) in ('a', 'e', 'i', 'o', 'u', 
                                    'A', 'E', 'I', 'O', 'U') then
            v_count := v_count + 1; 
        end if;
    end loop;
    p_count := v_count;
end;

----execution part-------

declare
 v_name varchar2(20) :='tushar kumar';
v_count number(10) :=0;
begin

count_vowels(v_name , v_count);
dbms_output.put_line(v_count);
end;




by function 

create or replace function count_vowels2(p_name varchar2) 
return number 
is
    v_count number := 0; 
begin
    for i in 1..length(p_name) loop
        if substr(p_name, i, 1) in ('a', 'e', 'i', 'o', 'u', 
                                    'A', 'E', 'I', 'O', 'U') then
            v_count := v_count + 1; 
        end if;
    end loop;
    return v_count;
end;
/



declare
v_result number(10);
begin
v_result :=count_vowels2('tushar kumar');
dbms_output.put_line(v_result);
end;



===================================================================================================





Q1 In iSQL*Plus, load the script lab_02_04_soln.sql that you created for question 4 of practice 2. 
Modify the script to convert the anonymous block to a procedure called greet.
Execute the script to create the procedure.
Save your script as lab_09_01_soln.sql.
Click the Clear button to clear the workspace.
Create and execute an anonymous block to invoke the procedure greet. Sample output is shown below.


Ans. 
create or replace procedure greet as
    today date := sysdate;          
    tomorrow today%type;             
	
begin
    tomorrow := today + 1;           
    dbms_output.put_line('hello world');
    dbms_output.put_line('today: ' || to_char(today, 'yyyy-mm-dd'));
    dbms_output.put_line('tomorrow: ' || to_char(tomorrow, 'yyyy-mm-dd'));
end;


----execution part-------
 begin
    greet ;
  
    end ;

------------------output ----

hello world
today: 2024-08-26
tomorrow: 2024-08-27

PL/SQL procedure successfully completed.


=================================================================================================================


Q2. Load the script lab_09_01_soln.sql. 
Drop the procedure greet by issuing the following command:
DROP PROCEDURE greet
Modify the procedure to accept an argument of type VARCHAR2. Call the argument name.
Print Hello <name> instead of printing Hello World. 
Save your script as lab_09_02_soln.sql.
Execute the script to create the procedure.
Create and execute an anonymous block to invoke the procedure greet with a parameter. Sample output is shown below.

Ans. 
 drop procedure greet ;

create or replace procedure greet(name in VARCHAR2) as
    today date := sysdate;          
    tomorrow today%type;             
	
begin
    tomorrow := today + 1;           
    dbms_output.put_line('Hello ' || name);
    dbms_output.put_line('today: ' || to_char(today, 'yyyy-mm-dd'));
    dbms_output.put_line('tomorrow: ' || to_char(tomorrow, 'yyyy-mm-dd'));
end;

----execution part-------

    begin
    greet('tushar');
   end;

------------------output ----
Hello tushar
today: 2024-08-26
tomorrow: 2024-08-27


===============================================================================================================

reverse of string----


    create or replace procedure reverse_str(
    p_string in out varchar2
) is
    v_reversed_string varchar2(32767) := '';
begin
    for i in reverse 1..length(p_string) loop
        v_reversed_string := v_reversed_string || substr(p_string, i, 1);
    end loop;
    p_string := v_reversed_string;
end;



----execution part-------

      declare
        v_str varchar2(20) :='tushar kumar';
        begin
        reverse_str(v_str);
     dbms_output.put(v_str);
     end;


========================================================================================================================



Create a procedure that takes a string and checks whether it is a palindrome. The procedure should return TRUE or FALSE 

create or replace procedure check_palindrome(
    p_string in varchar2,
    p_is_palindrome out varchar2
) is
    v_reversed_string varchar2(32767) := '';
begin
    for i in reverse 1..length(p_string) loop
        v_reversed_string := v_reversed_string || substr(p_string, i, 1);
    end loop;

    if p_string = v_reversed_string then
        p_is_palindrome := 'true';
    else
        p_is_palindrome := 'false';
    end if;
end;



----execution part-------

  declare
    v_str varchar2(20) :='tushar';
    v_palindrome varchar2(60);
    begin
    check_palindrome(v_str,v_palindrome);
    dbms_output.put_line(v_palindrome);
  end;
/


============================================================perform dml by procedure===============================================

create or replace procedure insert_emp(
    p_empno in number,
    p_name in varchar2
) is
begin
    insert into emp (empno, name)
    values (p_empno, p_name);
end;
/



begin
    insert_emp(1, 'John');
    insert_emp(2, 'Jane');
    insert_emp(3, 'Doe');
end;
/

=================================================================for deleting some data================================


create or replace procedure delete_emp(
    p_empno in number  
) is
begin
   delete from emp
where empno =p_empno;
end;





begin
    delete_emp(2);
if sql%found then
dbms_output.put_line('data is deleted');
else
dbms_output.put_line('data not found');
end if;
  
end;



===========================================================update======================


create or replace procedure update_emp(
    p_empno in number  
) is
begin
   update emp
set name ='vaibhav'
where empno=p_empno;
end;


begin
    update_emp(1);
if sql%found then
dbms_output.put_line('data is updated');
else
dbms_output.put_line('data not found');
end if;
  
end;



=======================================================================
 
Q. Write a program to tell the user whether he is major or minor. User will input the age. 
    Qualifying age for major is 18 years. Create a table Check_age (age, result). 
    Insert the age and result into the table. Result is major or minor. (Marks 2)
Ans: 


create procedure check_age_instr(
    p_age number, p_result varchar2)
    is
    begin
    insert into check_age(age,result) values(p_age,p_result);
   end;



declare
v_age number(20);
v_result varchar2(20);
begin
for i in 1..30 loop
v_age := dbms_random.value(1, 30);
if v_age > 18 then
v_result := 'major';
elsif v_age < 18 then
v_result := 'minor';
else
v_result := 'unknown';
end if;
check_age_instr(v_age, v_result);
end loop;
end;


===============================================================================================================

declare
  cursor c1 is
    select employee_id, department_id, last_name, hire_date
    from employees
    order by department_id, hire_date;
  v_dep_id employees.department_id%type := null;
  v_count number := 0;
begin
  for v_rec in c1 loop
    if v_dep_id is null or v_dep_id != v_rec.department_id then
      v_dep_id := v_rec.department_id;
      v_count := 1;  
    else
      v_count := v_count + 1;  
    end if;
    if v_count in (1, 3, 5) then
      dbms_output.put_line(
        'department id: ' || v_rec.department_id ||
        ', employee id: ' || v_rec.employee_id ||
        ', hire date: ' || v_rec.hire_date ||
        ', last name: ' || v_rec.last_name
      );
    end if;
  end loop;
end;


================================================================================
Write a procedure to find out the employees who have joined in consecutive three  days.

  create or replace procedure consecutive_employees is
       cursor c1 is
        select
        e1.employee_id as emp1,
        e2.employee_id as emp2,
        e3.employee_id as emp3
       from
        example e1,example e2,example e3
        where e2.hire_date = e1.hire_date + 1
     and  e3.hire_date = e2.hire_date + 1
      order by
      e1.hire_date;
      v_rec c1%rowtype;
     begin
     open c1;
      loop
     fetch c1 into v_rec;
     exit when c1%notfound;
      dbms_output.put_line('employee 1 => '|| v_rec.emp1 || '  employee 2 =>  ' || v_rec.emp2 || ' employee 3 => ' || v_rec.emp3);
      end loop;
      close c1;
    end;


========================================================================================================

if we want to insert a default value in a papameter  than wwe use named notation

create or replace procedure insert_data(
    p_lastname in varchar2 default 'singh',
    p_email in varchar2,
    p_hiredate in date,
    p_jobid in varchar2
) is
begin
    insert into duplicate_emp (last_name, email, hire_date, job_id)
    values (p_lastname, p_email, p_hiredate, p_jobid);
end;



begin
   
    insert_data(
        p_email => 'jane.doe@example.com', p_hiredate => to_date('2024-08-27', 'YYYY-MM-DD'),p_jobid => 'DEV'  );  
end;

===================================================================================================================================

LEsson 2 function

question 1 : Create and invoke the GET_JOB function to return a job title.
a.	Create and  compile a function called GET_JOB to return a job title.
b.	Create a VARCHAR2 host variable called TITLE, allowing a length of 35 characters. Invoke the function with SA_REP job ID to return the value in the host variable. Print the host variable to view the result.


answer ;




create or replace function get_job(p_jobid number)
return varchar2
is
  v_jobtitle jobs.job_title%type;
begin
  select job_title into v_jobtitle
  from jobs
  where job_id = p_jobid;

  return v_jobtitle;
exception
  when no_data_found then
   dbms_output.put_line('job id not found'); 
end;

variable title varchar2;

VARIABLE title VARCHAR2;
BEGIN
  :title := get_job('SA_REP'); 
  dbms_output.put_line('Job title of this ID is: ' || :title);
END;



---------------------------------------------------------------------------------------------------------------------------


question 2 : Create a function called GET_ANNUAL_COMP to return the annual salary computed from an employee’s monthly salary and commission passed as parameters.
a.	Develop and store the function GET_ANNUAL_COMP, accepting parameter values for monthly salary and commission. 
         Either or both values passed can be NULL, but the function should still return a non-NULL annual salary. Use the following basic formula to calculate the annual salary:
		(salary*12) + (commission_pct*salary*12)
b.	Use the function in a SELECT statement against the EMPLOYEES table for employees in department 30.



answer : 


create or replace function GET_ANNUAL_COMP (p_sal number, p_comm number)
return number
is
v_sal employees.salary%type;
v_comm employees.commission_pct%type;
begin
v_sal := nvl(p_sal, 0);
v_comm := nvl(p_comm,0);
return (v_sal*12) + (v_comm*v_sal*12);
end;




select employee_id, last_name,GET_ANNUAL_COMP(salary, commission_pct) as "anuual salary"
from employees
where department_id=30;




-------------------------------------------------------------------------------------------------------------------------




queestion : 	

Create a procedure, ADD_EMPLOYEE, to insert a new employee into the EMPLOYEES table. The procedure should call a VALID_DEPTID function to check whether the department ID specified for the new employee exists in the DEPARTMENTS table.
a.	Create a function VALID_DEPTID to validate a specified department ID and return a BOOLEAN value of TRUE if the department exists.

b.	Create the procedure ADD_EMPLOYEE to add an employee to the EMPLOYEES table. The row should be added to the EMPLOYEES table if the VALID_DEPTID function returns TRUE; otherwise, alert the user with an appropriate message. Provide the following parameters (with defaults specified in parentheses): first_name, last_name, email, job (SA_REP), mgr (145), sal (1000), comm (0), and deptid (30). Use the EMPLOYEES_SEQ sequence to set the employee_id column, and set hire_date to TRUNC(SYSDATE).

c.	Call ADD_EMPLOYEE for the name Jane Harris in department 15, leaving other parameters with their default values. What is the result?
d.	Add another employee named Joe Harris in department 80, leaving remaining parameters with their default values. What is the result?


anwer :


create or replace function valid_deptid(p_deptid number)
return boolean
is
  v_count number;
begin
  select count(*)
  into v_count
  from departments
  where department_id = p_deptid;
  if v_count > 0 then
    return true;
  else
    return false;
  end if;
exception
  when others then
    return false;
end;
/
------------------------------------------------------
create or replace procedure ADD_EMPLOYEE (
p_first_name varchar2, p_last_name varchar2, p_email varchar2, p_jobid varchar2 default 'SA_REP', p_mgrid number default 145, p_sal number default 1000, p_comm number default 0,p_deptid number default 30
)

is
begin
if valid_deptid(p_deptid ) then
insert into employees(first_name, last_name, email, job_id, manager_id, salary, commission_pct, department_id)
values (p_first_name,p_last_name,p_email,p_jobid,p_mgrid, p_sal,p_comm,p_deptid);

else
dbms_output.put_line('this is not valid department id');
end if;
end;
---------------------------------------------------------------

BEGIN
  add_employee(
    p_first_name => 'Jane',
    p_last_name => 'Harris',
    p_email => 'edhdbh@de.com',             
    p_deptid => 15             
  );
END;


output is :  this is not valid department id

------------------------------------------------------------------------------------------------------


BEGIN
  add_employee(
    p_first_name => 'Jane',
    p_last_name => 'Harris',
    p_email => 'edhdbh@de.com',             
    p_deptid => 80             
  );
END;



























