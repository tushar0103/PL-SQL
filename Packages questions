create or replace package areas
   is
    function square_area (p_side number) return number;
    function rectangle_area (p_length number,p_bredth number) return number;
    function triangle_area (p_base number,p_height number) return number;
     function circle_area (p_radius number) return number;
    function cube_area (p_side number) return number;
   end;

------------------------------------------------------



  create or replace package body areas
    is
      function square_area(p_side number) return number
      is
      begin
        return p_side * p_side;
      end ;

       function rectangle_area (p_length number,p_bredth number) return number
      is
       v_area number;
     begin
       v_area := p_length * p_bredth;
       return v_area;
     end ;

     function triangle_area(p_base number, p_height number) return number
     is
       v_area number;
     begin
       v_area := 0.5  p_base  p_height;
       return v_area;
     end ;

     function circle_area(p_radius number) return number
    is
       pi constant number := 3.14;
       v_area number;
     begin
       v_area := pi  p_radius  p_radius;
       return v_area;
     end;

     function cube_area(p_side number) return number
     is
       v_area number;
     begin
       v_area := 6  p_side  p_side;
       return v_area;
     end ;
  end areas;



------------------------------------------------




declare
v_area_triangle number;
v_area_circle number;
v_area_cube number;
v_area_rectangle number;
v_area_square number;
begin
v_area_triangle :=areas.triangle_area(2,5);
dbms_output.put_line(' Area of triangle is : ' ||v_area_triangle);
v_area_circle :=areas.circle_area(9);
dbms_output.put_line(' Area of circle is : ' ||v_area_circle);
v_area_cube :=areas.cube_area(5);
dbms_output.put_line(' Area of cube is : ' ||v_area_cube);
v_area_rectangle :=areas.rectangle_area(7,5);
dbms_output.put_line(' Area of rectangle is : ' ||v_area_rectangle );
v_area_square :=areas.square_area(5);
dbms_output.put_line(' Area of square is : ' ||v_area_square );
end;
/me 

======+++++++++++++++++++++++++++++++++++==============================++++++++++++++++++++++===========================+++++++++++++++++++++++=========++======================


Create a package specification and body called JOB_PKG, containing a copy of your ADD_JOB, UPD_JOB, and DEL_JOB procedures as well as your GET_JOB function.

a.	Create the package specification including the procedures and function headings as public constructs.
	Note: Consider whether you still need the stand-alone procedures and functions you just packaged.

b.	Create the package body with the implementations for each of the subprograms.

c.	Invoke your ADD_JOB package procedure by passing the values IT_SYSAN andSYSTEMS ANALYST as parameters.
d.	Query the JOBS table to see the result.


-------------


create or replace package job_pkg as
    procedure add_job(p_job_id in varchar2, p_job_title in varchar2);

    procedure upd_job(p_job_id in varchar2, p_job_title in varchar2);

  
    procedure del_job(p_job_id in varchar2);

   
    function get_job(p_job_id in varchar2) return varchar2;
end job_pkg;
/
------------------------body-----

create or replace package body job_pkg as

   
    procedure add_job(p_job_id in varchar2, p_job_title in varchar2) is
    begin
        insert into jobs (job_id, job_title)
        values (p_job_id, p_job_title);
    exception
        when dup_val_on_index then
            dbms_output.put_line('job id already exists.');
        
    end add_job;


    procedure upd_job(p_job_id in varchar2, p_job_title in varchar2) is
    begin
        update jobs
        set job_title = p_job_title
        where job_id = p_job_id;
    exception
        when no_data_found then
            dbms_output.put_line('job id does not exist.');
       
    end upd_job;

 
    procedure del_job(p_job_id in varchar2) is
    begin
        delete from jobs
        where job_id = p_job_id;
    exception
        when no_data_found then
            dbms_output.put_line('job id does not exist.');
        
    end del_job;

  
    function get_job(p_job_id in varchar2) return varchar2 is
        v_job_title varchar2(100);
    begin
        select job_title
        into v_job_title
        from jobs
        where job_id = p_job_id;
        
        return v_job_title;
    exception
        when no_data_found then
            return null;
       
    end get_job;

end job_pkg;



-------------------------


begin

    job_pkg.add_job('it_sysan', 'systems analyst');
end;

select * from jobs;
